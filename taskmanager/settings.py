"""
Django settings for taskmanager project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from datetime import timedelta
import environ
from pathlib import Path
env = environ.Env()
environ.Env.read_env()
<<<<<<< HEAD
# from django.core.management.utils import get_random_secret_key
=======
from django.core.management.utils import get_random_secret_key
#
print(get_random_secret_key())

>>>>>>> bb49d46 (;)

# print(get_random_secret_key()) ..
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# import os

# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  # путь до корня проекта
PROJECT_DIR = BASE_DIR

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJSECRETKEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

import os

ALLOWED_HOSTS = [os.getenv('ALLOWED_HOST'), '127.0.0.1']

# Application definition

INSTALLED_APPS = [
# "semantic_admin",
# "semantic_forms",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #приложении
    'users',
    'tasks',
    'chat',
    'news',
    'reports',
    'bpm', # Business process managment новое приложение для автоматизации процессов
    'notifications',
    'event_calendar',
    #пакеты
    'simple_history',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    "drf_spectacular",
    'corsheaders',
    # "debug_toolbar",
    'celery',
    'django_celery_beat',
    'channels',


    # 'daphne',
    'django_extensions',
]
# CORS_ORIGIN_ALLOW_ALL = True
<<<<<<< HEAD

=======
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_ALL_ORIGINS = True
>>>>>>> d71f201 (s)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
]
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True #работа с куками
TEST_RUNNER = "django.test.runner.DiscoverRunner"
# ; Надо удалить corss перед pull/push
#
# ; CORS_ORIGIN_ALLOW_ALL = True
# ; CORS_ALLOW_ALL_ORIGINS = True
# ; CORS_ALLOWED_ORIGINS = [
# ;     'http://localhost:5173/'
# ; ]
# ;
# ; CORS_ALLOW_CREDENTIALS = True #работа с куками



ASGI_APPLICATION = 'taskmanager.asgi.application'
# CHANNEL_LAYERS = {}
AUTH_USER_MODEL = 'users.User'
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
'DEFAULT_PERMISSION_CLASSES': (
   'rest_framework.permissions.AllowAny',
)
}
# CORS_ALLOWED_ORIGINS = ['http://localhost:5173']
ROOT_URLCONF = 'taskmanager.urls'
VUE_PATH = os.path.join(BASE_DIR,'static','vue','dist')
# print(f'Путь к vue file',(os.path.exists(VUE_PATH)))
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [VUE_PATH],
        # [
        #     os.path.join(BASE_DIR, 'templates'),
        #          # os.path.join(BASE_DIR, 'tasks',),
        #          os.path.join(BASE_DIR, 'static', 'vue', 'dist')],
        #'dashboard','templates',
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'taskmanager.wsgi.application'



# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        # 'NAME': os.getenv('POSTGRES_DB'),
        # 'USER': os.getenv('POSTGRES_USER'),
        # 'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        # 'HOST': 'db',
        # 'PORT': '5432',
        'NAME': env('DBNAME'),
        'USER': env('DBUSER'),
        'PASSWORD': env('DBPASSWORD'),
        # 'NAME': 'taskmanagerdb',
        # 'USER': 'nurbergen',
        # 'PASSWORD': 'qwerty123',
    }
}
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = "smtp.gmail.com"
# EMAIL_PORT = 587
# EMAIL_USE_TLS= True
# EMAIL_HOST_USER = env('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Almaty'

USE_I18N = True

USE_TZ = True

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1520),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

BASE_DIR = Path(__file__).resolve().parent.parent
LOG_DIR = BASE_DIR / 'logs'
STATIC_URL = '/static/'

STATIC_URL = "/static/"

# STATIC_ROOT и STATICFILES_DIRS не должны указывать на одно и то же
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # Сюда collectstatic будет копировать файлы

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static/vue/dist"),  # Откуда Django берет статику при разработке
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)
import logging
import sys
from pathlib import Path

LOG_DIR = Path('logs')  # Предполагается, что LOG_DIR определен

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_DIR / 'task_manager.log',
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        'debug_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_DIR / 'task_manager_debug.log',
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'stream': sys.stdout,  # Явно указываем stdout
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'debug_file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'taskmanager': {
            'handlers': ['debug_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Добавляем обработчики и логгеры для каждого приложения
APPS = [
    'users',
    'tasks',
    'chat',
    'news',
    'reports',
    'notifications',
    'event_calendar',
    'bpm',
]

for app in APPS:
    log_filename = LOG_DIR / f'{app}.log'
    LOGGING['handlers'][f'{app}_file'] = {
        'class': 'logging.FileHandler',
        'filename': log_filename,
        'formatter': 'verbose',
        'encoding': 'utf-8',
    }
    LOGGING['loggers'][app] = {
        'handlers': [f'{app}_file', 'console'],
        'level': 'INFO',
        'propagate': False,
    }